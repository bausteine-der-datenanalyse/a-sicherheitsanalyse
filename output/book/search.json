[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "a-sicherheitsanalyse",
    "section": "",
    "text": "Einleitung",
    "crumbs": [
      "Einleitung"
    ]
  },
  {
    "objectID": "index.html#voraussetzungen",
    "href": "index.html#voraussetzungen",
    "title": "a-sicherheitsanalyse",
    "section": "Voraussetzungen",
    "text": "Voraussetzungen\nTeständerung\nZum erfolgreichen Bearbeiten dieses Anwendungsbausteins benötigen Sie die Inhalte des Methodenbausteins Grundlagen der Statistik [Referenz] und des Werkzeugbausteins Datenmanagements [Referenz]",
    "crumbs": [
      "Einleitung"
    ]
  },
  {
    "objectID": "index.html#lernziele",
    "href": "index.html#lernziele",
    "title": "a-sicherheitsanalyse",
    "section": "Lernziele",
    "text": "Lernziele\nZiel dieses Bausteins ist es, typische Inhalte von sicherheitsrelevanten Fragestellungen von Verkehrsnetzen in grafischer Form mithilfe der Programmiersprache R darzustellen. Dabei lernen Sie wo deutschsprachige Unfalldaten gefunden werden können, wie Unfalldaten eingelesen und analysiert werden und welche verschiedenen Darstellungsformen sich für bestimmte Datentypen eignen.",
    "crumbs": [
      "Einleitung"
    ]
  },
  {
    "objectID": "index.html#verwendete-datensätze",
    "href": "index.html#verwendete-datensätze",
    "title": "a-sicherheitsanalyse",
    "section": "Verwendete Datensätze",
    "text": "Verwendete Datensätze\nDaten des Straßennetzes des Bundesinformationssystem Straße (BISStra)\nUnfalldaten des Unfallatlas des Statistischen Bundesamts",
    "crumbs": [
      "Einleitung"
    ]
  },
  {
    "objectID": "aufgabe/aufgaben_sicherheitsanalyse.html",
    "href": "aufgabe/aufgaben_sicherheitsanalyse.html",
    "title": "1  Aufgaben zur Sicherheitsanalyse von Verkehrsnetzen",
    "section": "",
    "text": "2 Datenquellen\nDie statistischen Ämter des Bundes und der Länder erheben und veröffentlichen mit der Straßenverkehrsunfallstatistik die Verkehrsunfälle mit Personenschaden oder Sachschaden in Deutschland. Im Unfallatlas werden Unfälle mit Personenschaden geführt. Für die Sicherheitsanalyse von Verkehrsnetzen können diese Daten verwendet und analysiert werden.\nVerwenden Sie für das Straßennetz die Daten des Bundesinformationssystems Straße (BISStra) der Bundesanstalt für Straßen- und Verkehrswesen (BAST): https://www.bast.de/DE/Verkehrstechnik/Fachthemen/v2-bisstra.html",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Aufgaben zur Sicherheitsanalyse von Verkehrsnetzen</span>"
    ]
  },
  {
    "objectID": "aufgabe/aufgaben_sicherheitsanalyse.html#aufgabe-1-unfälle-zählen",
    "href": "aufgabe/aufgaben_sicherheitsanalyse.html#aufgabe-1-unfälle-zählen",
    "title": "1  Aufgaben zur Sicherheitsanalyse von Verkehrsnetzen",
    "section": "2.1 Aufgabe 1 : Unfälle zählen",
    "text": "2.1 Aufgabe 1 : Unfälle zählen\nStellen Sie eine rein deskriptive Übersicht über die Unfallanzahl einer beliebigen Autobahn und für Gesamtdeutschland dar.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Aufgaben zur Sicherheitsanalyse von Verkehrsnetzen</span>"
    ]
  },
  {
    "objectID": "aufgabe/aufgaben_sicherheitsanalyse.html#aufgabe-2-unfalldichte-und-unfallrate",
    "href": "aufgabe/aufgaben_sicherheitsanalyse.html#aufgabe-2-unfalldichte-und-unfallrate",
    "title": "1  Aufgaben zur Sicherheitsanalyse von Verkehrsnetzen",
    "section": "2.2 Aufgabe 2 : Unfalldichte und Unfallrate",
    "text": "2.2 Aufgabe 2 : Unfalldichte und Unfallrate\nBearbeiten Sie die folgende Aufgabenstellung sowohl für eine ausgewählte Autobahn als auch für Gesamtdeutschland:\n\nStellen Sie die Unfallraten von Streckenabschnitten grafisch dar.\nStellen Sie die Unfalldichten von Streckenabschnitten grafisch dar.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Aufgaben zur Sicherheitsanalyse von Verkehrsnetzen</span>"
    ]
  },
  {
    "objectID": "musterloesung.html",
    "href": "musterloesung.html",
    "title": "2  Musterlösung Sicherheitsanalyse",
    "section": "",
    "text": "2.1 Aufgabe 1",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Musterlösung Sicherheitsanalyse</span>"
    ]
  },
  {
    "objectID": "musterloesung.html#aufgabe-1",
    "href": "musterloesung.html#aufgabe-1",
    "title": "2  Musterlösung Sicherheitsanalyse",
    "section": "",
    "text": "2.1.1 Unfalldichte\n\n2.1.1.1 A43\nUnfälle filtern:\n```{r}\nunfaelle_43 = unfaelle %&gt;%\n    # Welche Autobahn am Nächsten\n    mutate(nearest_autobahn_id = st_nearest_feature(st_zm(.), a43)) %&gt;% \n    # Distanz zur A43\n    mutate(nearest_autobahn_distance = st_distance(st_zm(.), a43[nearest_autobahn_id, ], by_element = TRUE))\n```\nAlles nicht in der Nähe von A43 raus:\n```{r}\nunfaelle_autobahn = unfaelle_43 |&gt; \n    filter(as.double(nearest_autobahn_distance) &lt;= 15) |&gt;\n  st_zm()\n```\nUnfälle zählen:\n```{r}\nautobahnen_accident_count = unfaelle_autobahn %&gt;% \n    as_tibble() %&gt;% \n    select(-geometry) %&gt;%\n    count(nearest_autobahn_id, UKATEGORIE) %&gt;% \n  spread(UKATEGORIE, n) %&gt;%\n  rename(Anzahl_UK2 = `2`, Anzahl_UK3 = `3`) %&gt;%\n  replace(is.na(.), 0) %&gt;%\n  mutate(Anzahl_U_G = Anzahl_UK2 + Anzahl_UK3)\n# Hier gehören eigentlich noch Unfaelle nach Kategorie 1 rein, existieren aber in diesem Zeitraum nicht.\n```\nVerbinden mit Daten der A43:\n```{r}\na43 = a43 |&gt; \n    left_join(autobahnen_accident_count, by = c(\"rownumber\" = \"nearest_autobahn_id\"))\n```\nPlotten:\n```{r}\nggplot () +\n  geom_sf(data = a43, size = 2, mapping = aes(color = Anzahl_U_G)) +\n  scale_color_distiller(palette = 8 , direction = 1, breaks = seq(2,14,2)) +\n  labs(title = \"Anzahl der Verkehrsunfälle nach Abschnitten der A43 im Jahr 2022\",\n       color = \"Anzahl Verkehrsunfälle\") +\n theme(plot.title = element_text(size=10))\n```\n\n\n2.1.1.2 Deutschland\nUnfälle filtern:\n```{r}\nunfaelle_de = unfaelle %&gt;%\n    # Welche Autobahn ist am Nächsten\n    mutate(nearest_autobahn_id = st_nearest_feature(st_zm(.), strecke_de)) %&gt;% \n    # Distanz zur nächsten Autobahn berechnen\n    mutate(nearest_autobahn_distance = st_distance(st_zm(.), strecke_de[nearest_autobahn_id, ], by_element = TRUE))\n```\nAlles nicht in der Nähe von BAB raus:\n```{r}\nunfaelle_de_autobahn = unfaelle_de |&gt; \n    filter(as.double(nearest_autobahn_distance) &lt;= 15) |&gt;\n  st_zm()\n```\nUnfälle zählen:\n```{r}\nde_unfall_anzahl = unfaelle_de_autobahn %&gt;% \n    as_tibble() %&gt;% \n    select(-geometry) %&gt;%\n    count(nearest_autobahn_id, UKATEGORIE) %&gt;% \n  spread(UKATEGORIE, n) %&gt;%\n  rename(Anzahl_UK1 = `1`,Anzahl_UK2 = `2`, Anzahl_UK3 = `3`) %&gt;%\n  replace(is.na(.), 0) %&gt;%\n  mutate(Anzahl_U_G = Anzahl_UK1 + Anzahl_UK2 + Anzahl_UK3)\n```\nVerbinden mit Daten:\n```{r}\nstrecke_de = strecke_de |&gt; \n    left_join(de_unfall_anzahl, by = c(\"rownumber\" = \"nearest_autobahn_id\"))\n\nstrecke_de = strecke_de |&gt;\n  mutate(UD = (Anzahl_U_G)/(Sk_Laenge_km))\n```\nPlotten:\n```{r}\nggplot () +\n  geom_sf(data = d_de, fill = NA, size = 0.5) +\n  geom_sf(data = strecke_de, size = 2, mapping = aes(color = Anzahl_U_G)) +\n  scale_color_distiller(palette = 8 , direction = 1) +\n  labs(title = \"Anzahl der Verkehrsunfälle nach Abschnitten der BAB im Jahr 2022\",\n       color = \"Anzahl Verkehrsunfälle\") +\n theme(plot.title = element_text(size=10))\n```\n\n\n\n2.1.2 Unfallrate\n\n2.1.2.1 A43\n\n\n\n2.1.3 Deutschland",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Musterlösung Sicherheitsanalyse</span>"
    ]
  },
  {
    "objectID": "musterloesung.html#aufgabe-2",
    "href": "musterloesung.html#aufgabe-2",
    "title": "2  Musterlösung Sicherheitsanalyse",
    "section": "2.2 Aufgabe 2",
    "text": "2.2 Aufgabe 2",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Musterlösung Sicherheitsanalyse</span>"
    ]
  },
  {
    "objectID": "musterloesung.html#aufgabe-3",
    "href": "musterloesung.html#aufgabe-3",
    "title": "2  Musterlösung Sicherheitsanalyse",
    "section": "2.3 Aufgabe 3",
    "text": "2.3 Aufgabe 3",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Musterlösung Sicherheitsanalyse</span>"
    ]
  },
  {
    "objectID": "musterloesung.html#aufgabe-4",
    "href": "musterloesung.html#aufgabe-4",
    "title": "2  Musterlösung Sicherheitsanalyse",
    "section": "2.4 Aufgabe 4",
    "text": "2.4 Aufgabe 4",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Musterlösung Sicherheitsanalyse</span>"
    ]
  },
  {
    "objectID": "sicherheitsanalyse.html",
    "href": "sicherheitsanalyse.html",
    "title": "3  Ausführliche Erläuterungen zur Musterlösung",
    "section": "",
    "text": "3.1 Unfälle zählen\nunfall_csv = read_csv2(\"data/Unfallorte2022_LinRef.csv\") \nunfaelle &lt;- st_as_sf(unfall_csv, coords = c(\"LINREFX\", \"LINREFY\"), \n                  crs = 25832)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ausführliche Erläuterungen zur Musterlösung</span>"
    ]
  },
  {
    "objectID": "sicherheitsanalyse.html#unfälle-zählen",
    "href": "sicherheitsanalyse.html#unfälle-zählen",
    "title": "3  Ausführliche Erläuterungen zur Musterlösung",
    "section": "",
    "text": "3.1.1 A43\nDaten einlesen:\n\nstrecke &lt;- read_sf(\"data/geo/BFStr_Netz_SK.geojson\")\na43 &lt;- strecke |&gt;\n  filter(Str_Kennung == \"A43\" & Sk_Achse == \"Hauptachse\") |&gt;\n  mutate(rownumber = row_number())\n\nUnfälle filtern:\n\nunfaelle_43 = unfaelle %&gt;%\n    # find out which autobahn is closest by\n    mutate(nearest_autobahn_id = st_nearest_feature(st_zm(.), a43)) %&gt;% \n    # calculate distance to closest autobahn\n    mutate(nearest_autobahn_distance = st_distance(st_zm(.), a43[nearest_autobahn_id, ], by_element = TRUE))\n\nAlles nicht in der Nähe von BAB raus:\n\nunfaelle_autobahn = unfaelle_43 |&gt; \n    filter(as.double(nearest_autobahn_distance) &lt;= 15) |&gt;\n  st_zm()\n\nUnfälle zählen:\n\nautobahnen_accident_count = unfaelle_autobahn %&gt;% \n    as_tibble() %&gt;% \n    select(-geometry) %&gt;%\n    count(nearest_autobahn_id, UKATEGORIE) %&gt;% \n  spread(UKATEGORIE, n) %&gt;%\n  rename(Anzahl_UK2 = `2`, Anzahl_UK3 = `3`) %&gt;%\n  replace(is.na(.), 0) %&gt;%\n  mutate(Anzahl_U_G = Anzahl_UK2 + Anzahl_UK3)\n# Hier gehören eigentlich noch Unfaelle nach Kategorie 1 rein\n\nVerbinden mit Daten der A43:\n\na43 = a43 |&gt; \n    left_join(autobahnen_accident_count, by = c(\"rownumber\" = \"nearest_autobahn_id\"))\n\na43 &lt;- replace(a43, is.na(a43), 0)\n\nReine deskriptive Darstellung aller Unfälle Plotten:\n\nggplot () +\n  geom_sf(data = a43, size = 2, mapping = aes(color = Anzahl_U_G)) +\n  scale_color_distiller(palette = 8 , direction = 1, breaks = seq(2,14,2)) +\n  labs(title = \"Anzahl der Verkehrsunfälle nach Abschnitten der A43 im Jahr 2022\",\n       color = \"Anzahl Verkehrsunfälle\") +\n theme(plot.title = element_text(size=10))\n\n\n\n\n\n\n\n\nBarrierefreiheit Plot-Test\n\nggplot () +\n  geom_sf(data = a43, size = 2, mapping = aes(color = Anzahl_U_G)) +\n  scale_color_viridis_b(direction = -1, breaks = seq(2,14,2)) +\n  labs(title = \"Anzahl der Verkehrsunfälle nach Abschnitten der A43 im Jahr 2022\",\n       color = \"Anzahl Verkehrsunfälle\") +\n theme(plot.title = element_text(size=10))\n\n\n\n\n\n\n\n\n\n\n3.1.2 Gesamtdeutschland\n\nstrecke_de &lt;- strecke |&gt;\n  filter(Str_Klasse_kurz == \"A\" & Sk_Achse == \"Hauptachse\") |&gt;\n  mutate(rownumber = row_number())\n\nUnfälle filtern:\n\nunfaelle_de = unfaelle %&gt;%\n    # find out which autobahn is closest by\n    mutate(nearest_autobahn_id = st_nearest_feature(st_zm(.), strecke_de)) %&gt;% \n    # calculate distance to closest autobahn\n    mutate(nearest_autobahn_distance = st_distance(st_zm(.), strecke_de[nearest_autobahn_id, ], by_element = TRUE))\n\nAlles nicht in der Nähe von BAB raus:\n\nunfaelle_de_autobahn = unfaelle_de |&gt; \n    filter(as.double(nearest_autobahn_distance) &lt;= 15) |&gt;\n  st_zm()\n\nUnfälle zählen:\n\nde_unfall_anzahl = unfaelle_de_autobahn %&gt;% \n    as_tibble() %&gt;% \n    select(-geometry) %&gt;%\n    count(nearest_autobahn_id, UKATEGORIE) %&gt;% \n  spread(UKATEGORIE, n) %&gt;%\n  rename(Anzahl_UK1 = `1`,Anzahl_UK2 = `2`, Anzahl_UK3 = `3`) %&gt;%\n  replace(is.na(.), 0) %&gt;%\n  mutate(Anzahl_U_G = Anzahl_UK1 + Anzahl_UK2 + Anzahl_UK3)\n\nVerbinden mit Daten:\n\nstrecke_de = strecke_de |&gt; \n    left_join(de_unfall_anzahl, by = c(\"rownumber\" = \"nearest_autobahn_id\"))\n\nstrecke_de = strecke_de |&gt;\n  mutate(UD = (Anzahl_U_G)/(Sk_Laenge_km))\n\nstrecke_de &lt;- replace(strecke_de, is.na(strecke_de), 0)\n\nPlotten:\n\nd_de &lt;- gisco_get_nuts(country = \"Germany\", nuts_level = 0, resolution = 03)\n\n\nggplot () +\n  geom_sf(data = d_de, fill = NA, size = 0.5) +\n  geom_sf(data = strecke_de, size = 2, mapping = aes(color = Anzahl_U_G)) +\n  scale_color_distiller(palette = 8 , direction = 1) +\n  labs(title = \"Anzahl der Verkehrsunfälle nach Abschnitten der BAB im Jahr 2022\",\n       color = \"Anzahl Verkehrsunfälle\") +\n theme(plot.title = element_text(size=10))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ausführliche Erläuterungen zur Musterlösung</span>"
    ]
  },
  {
    "objectID": "sicherheitsanalyse.html#unfallrate-und-unfalldichten",
    "href": "sicherheitsanalyse.html#unfallrate-und-unfalldichten",
    "title": "3  Ausführliche Erläuterungen zur Musterlösung",
    "section": "3.2 Unfallrate und Unfalldichten:",
    "text": "3.2 Unfallrate und Unfalldichten:\nZählstelle als sf\n\nd_Jawe &lt;- read_csv2(\"data/zs/Jawe2022.csv\", locale = locale(encoding = 'iso-8859-1'))\n\nÜberprüfen wieviele Zählstellen Daten haben:\n\nd_Jawe_BAB &lt;- d_Jawe |&gt;\n  filter(Str_Kl == \"A\")\nAnzahl_BAB_ZST = nrow(d_Jawe_BAB)\n\n\nd_Jawe_BAB_NA &lt;- d_Jawe_BAB |&gt;\n  drop_na(DTV_Kfz_MobisSo_Q)\nAnzahl_BAB_ZST_Daten = nrow(d_Jawe_BAB_NA)\n\nWir haben also Anzahl_BAB_ZST = 1228 Zählstellen auf Autobahnen und davon besitzen Anzahl_BAB_ZST_Daten = 868 Daten im Jahr 2022.\nKoordinaten der Zählstelle als simple feature anlegen, da nur so weitere sf-Funktionen verwendet werden können.\n\nd_Jawe_sf = st_as_sf(d_Jawe, coords =  c(\"Koor_UTM32_E\", \"Koor_UTM32_N\"),  crs = 25832)\n\nExemplarisch nur Werte der A43, die auch vorhanden sind. Blöderweise nur noch 1 Wert über.\n\nd_Jawe_sf &lt;- d_Jawe_sf |&gt;\n  filter(Str_Kl == \"A\" & Str_Nr == \"43\") |&gt;\n  drop_na(DTV_Kfz_MobisSo_Q)\n\n\nd_Jawe_sf = d_Jawe_sf %&gt;%\n    # find out which autobahn is closest by\n    mutate(nearest_autobahn_id = st_nearest_feature(st_zm(.), a43))%&gt;% \n    # calculate distance to closest autobahn\n    mutate(nearest_autobahn_distance = st_distance(st_zm(.), a43[nearest_autobahn_id, ], by_element = TRUE))\n\n\nd_Jawe_sf2 = d_Jawe_sf |&gt;\n  as_tibble() |&gt;\n    select(DZ_Nr, nearest_autobahn_id, DTV_Kfz_MobisSo_Q, !geometry)\n\nTO-DO: Sinnhaftigkeit klären\n\na43_2 = a43 |&gt; \n    left_join(d_Jawe_sf2, by = c(\"rownumber\" = \"nearest_autobahn_id\")) |&gt;\n  mutate(UR = (10^6*Anzahl_U_G)/ (DTV_Kfz_MobisSo_Q * Sk_Laenge_km), UD = (Anzahl_U_G)/(Sk_Laenge_km))\n\nUnfalldichte Plot\n\nggplot () +\n  geom_sf(data = a43_2, size = 2, mapping = aes(color = UD)) +\n  scale_color_viridis_b(direction = -1) +\n  labs(title = \"Unfalldichten nach Abschnitten der A43 im Jahr 2022\",\n       color = \"Unfalldichte\") +\n theme(plot.title = element_text(size=10))\n\n\n\n\n\n\n\n\nUnfallrate Plot\n\nggplot () +\n  geom_sf(data = a43_2, size = 2, mapping = aes(color = UR)) +\n  scale_color_distiller(palette = 8 , direction = 1) +\n  labs(title = \"Unfallraten nach Abschnitten der A43 im Jahr 2022\",\n       color = \"Unfallrate\") +\n theme(plot.title = element_text(size=10))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ausführliche Erläuterungen zur Musterlösung</span>"
    ]
  }
]